@model InternalProj.Models.StaffRegViewModel

@{
    ViewData["Title"] = "Staff Registration";
}

<!-- Tailwind CSS CDN -->
<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet" />
<!-- Flatpickr CSS -->
<link href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css" rel="stylesheet" />



@* <div class="min-h-screen bg-gray-100 flex flex-col items-center justify-center p-6">
    <div class="bg-white shadow-xl rounded-lg w-full max-w-5xl p-10">
        <h3 class="text-2xl font-extrabold mt-8 mb-8 text-gray-900">Staff Registration</h3> *@

<div class="common-pages-layout">
    <div class="common-inner-container">
        <h3 class="page-heading">Staff Registration</h3>

        @if (TempData["SuccessMessage"] != null)
        {
            <div class="bg-green-100 text-green-800 rounded p-4 text-center font-semibold mb-6" id="success">
                @TempData["SuccessMessage"]
            </div>
        }
        @if (TempData["ErrorMessage"] != null)
        {
            <div class="bg-red-100 text-red-800 rounded p-4 text-center font-semibold mb-6" id="error">
                @TempData["ErrorMessage"]
            </div>
        }

        <script>
            setTimeout(() => { document.getElementById('success')?.classList.add('hidden'); }, 5000);
            setTimeout(() => { document.getElementById('error')?.classList.add('hidden'); }, 5000);
        </script>

        <form id="staffForm" asp-action="Create" class="p-4" method="post" novalidate>
            <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
                <!-- First Name -->
                <div>
                    <label for="FirstName" class="block text-sm font-semibold text-gray-700 mb-1">First Name <span class="text-red-600">*</span></label>
                    <input id="FirstName" name="FirstName" type="text" required
                           class="w-full rounded border border-gray-300 px-3 py-2 text-sm focus:ring-2 focus:ring-indigo-400 focus:outline-none" />
                    <p class="validation-error text-xs text-red-500 mt-1 hidden">First Name is required</p>
                </div>

                <!-- Last Name -->
                <div>
                    <label for="LastName" class="block text-sm font-semibold text-gray-700 mb-1">Last Name <span class="text-red-600">*</span></label>
                    <input id="LastName" name="LastName" type="text" required
                           class="w-full rounded border border-gray-300 px-3 py-2 text-sm focus:ring-2 focus:ring-indigo-400 focus:outline-none" />
                    <p class="validation-error text-xs text-red-500 mt-1 hidden">Last Name is required</p>
                </div>

                <!-- Address 1 -->
                <div>
                    <label for="Address1" class="block text-sm font-semibold text-gray-700 mb-1">Address 1 <span class="text-red-600">*</span></label>
                    <input id="Address1" name="Address1" type="text" required
                           class="w-full rounded border border-gray-300 px-3 py-2 text-sm focus:ring-2 focus:ring-indigo-400 focus:outline-none" />
                    <p class="validation-error text-xs text-red-500 mt-1 hidden">Address 1 is required</p>
                </div>

                <!-- Address 2 -->
                <div>
                    <label for="Address2" class="block text-sm font-semibold text-gray-700 mb-1">Address 2</label>
                    <input id="Address2" name="Address2" type="text"
                           class="w-full rounded border border-gray-300 px-3 py-2 text-sm focus:ring-2 focus:ring-indigo-400 focus:outline-none" />
                </div>

                <!-- DOB -->
                <div>
                    <label for="DOB" class="block text-sm font-semibold text-gray-700 mb-1">DOB <span class="text-red-600">*</span></label>
                    <input id="DOB" name="DOB" type="text" placeholder="yyyy-MM-dd" required pattern="^\d{4}-\d{2}-\d{2}$"
                           class="w-full rounded border border-gray-300 px-3 py-2 text-sm placeholder-gray-400 focus:ring-2 focus:ring-indigo-400 focus:outline-none" />
                    <p class="validation-error text-xs text-red-500 mt-1 hidden">Valid DOB (yyyy-MM-dd) required and must be 18+ years</p>
                </div>

                <!-- DOJ -->
                <div>
                    <label for="DOJ" class="block text-sm font-semibold text-gray-700 mb-1">DOJ <span class="text-red-600">*</span></label>
                    <input id="DOJ" name="DOJ" type="text" placeholder="yyyy-MM-dd" required pattern="^\d{4}-\d{2}-\d{2}$"
                           class="w-full rounded border border-gray-300 px-3 py-2 text-sm placeholder-gray-400 focus:ring-2 focus:ring-indigo-400 focus:outline-none" />
                    <p class="validation-error text-xs text-red-500 mt-1 hidden">Valid DOJ (yyyy-MM-dd) is required</p>
                </div>

                <!-- Phone 1 -->
                <div>
                    <label for="Phone1" class="block text-sm font-semibold text-gray-700 mb-1">Phone 1 <span class="text-red-600">*</span></label>
                    <input id="Phone1" name="Phone1" type="text" required pattern="^\+?[0-9]{10}$"
                           class="w-full rounded border border-gray-300 px-3 py-2 text-sm focus:ring-2 focus:ring-indigo-400 focus:outline-none" />
                    <p class="validation-error text-xs text-red-500 mt-1 hidden">Valid Phone 1 is required</p>
                </div>

                <!-- Phone 2 -->
                <div>
                    <label for="Phone2" class="block text-sm font-semibold text-gray-700 mb-1">Phone 2</label>
                    <input id="Phone2" name="Phone2" type="text" pattern="^\+?[0-9]{10}$"
                           class="w-full rounded border border-gray-300 px-3 py-2 text-sm focus:ring-2 focus:ring-indigo-400 focus:outline-none" />
                    <p class="validation-error text-xs text-red-500 mt-1 hidden">Invalid Phone 2 format</p>
                </div>

                <!-- WhatsApp -->
                <div>
                    <label for="Whatsapp" class="block text-sm font-semibold text-gray-700 mb-1">WhatsApp</label>
                    <input id="Whatsapp" name="Whatsapp" type="text" pattern="^\+?[0-9]{10}$"
                           class="w-full rounded border border-gray-300 px-3 py-2 text-sm focus:ring-2 focus:ring-indigo-400 focus:outline-none" />
                    <p class="validation-error text-xs text-red-500 mt-1 hidden">Invalid WhatsApp format</p>
                </div>

                <!-- Email -->
                <div>
                    <label for="Email" class="block text-sm font-semibold text-gray-700 mb-1">Email <span class="text-red-600">*</span></label>
                    <input id="Email" name="Email" type="email" required title="Enter a valid email address"
                           class="w-full rounded border border-gray-300 px-3 py-2 text-sm focus:ring-2 focus:ring-indigo-400 focus:outline-none" />
                    <p class="validation-error text-xs text-red-500 mt-1 hidden">Valid Email is required</p>
                </div>

                <!-- Phone Type -->
                <div>
                    <label for="PhoneTypeId" class="block text-sm font-semibold text-gray-700 mb-1">Phone Type <span class="text-red-600">*</span></label>
                    <select id="PhoneTypeId" name="PhoneTypeId" required
                            class="w-full rounded border border-gray-300 px-3 py-2 text-sm bg-white focus:ring-2 focus:ring-indigo-400 focus:outline-none">
                        <option value="">-- Select Phone Type --</option>
                        @foreach (var type in Model.PhoneTypes)
                        {
                            <option value="@type.PhoneTypeId">@type.PhoneTypeName</option>
                        }
                    </select>
                    <p class="validation-error text-xs text-red-500 mt-1 hidden">Phone Type is required</p>
                </div>

                <!-- Branch -->
                <div>
                    <label for="BranchId" class="block text-sm font-semibold text-gray-700 mb-1">Branch <span class="text-red-600">*</span></label>
                    <select id="BranchId" name="BranchId" required
                            class="w-full rounded border border-gray-300 px-3 py-2 text-sm bg-white focus:ring-2 focus:ring-indigo-400 focus:outline-none">
                        <option value="">-- Select Branch --</option>
                        @foreach (var branch in Model.Branches)
                        {
                            <option value="@branch.BranchId">@branch.BranchName</option>
                        }
                    </select>
                    <p class="validation-error text-xs text-red-500 mt-1 hidden">Branch is required</p>
                </div>

                <!-- Designation (multi-checkbox dropdown) -->
                <div>
                    <label class="block text-sm font-semibold text-gray-700 mb-1">Designation <span class="text-red-600">*</span></label>
                    <div class="multi-checkbox-dropdown relative w-full" id="designationDropdown">
                        <div tabindex="0"
                             class="selected-items border border-gray-300 rounded px-3 py-2 bg-white cursor-pointer overflow-hidden whitespace-nowrap text-ellipsis text-sm focus:ring-2 focus:ring-indigo-400 focus:outline-none">
                            Select Designation(s)
                        </div>
                        <div class="checkbox-list absolute left-0 mt-1 w-full max-h-52 overflow-y-auto bg-white border border-gray-300 rounded shadow-md hidden z-50 text-sm">
                            @foreach (var designation in Model.Designations)
                            {
                                var isChecked = Model.SelectedDesignationIds != null && Model.SelectedDesignationIds.Contains(designation.DesignationId);
                                <label class="block px-2 py-1 hover:bg-gray-100 cursor-pointer">
                                    <input type="checkbox" name="SelectedDesignationIds" value="@designation.DesignationId"
                                           @(isChecked ? "checked" : "") class="mr-2 align-middle" />
                                    @designation.Name
                                </label>
                            }
                        </div>
                    </div>
                    <p class="validation-error text-xs text-red-500 mt-1 hidden">At least one Designation is required</p>
                </div>

                <input type="hidden" name="Active" value="Y" />

                <!-- Department (multi-checkbox dropdown) -->
                <div>
                    <label class="block text-sm font-semibold text-gray-700 mb-1">Department <span class="text-red-600">*</span></label>
                    <div class="multi-checkbox-dropdown relative w-full" id="departmentDropdown">
                        <div tabindex="0"
                             class="selected-items border border-gray-300 rounded px-3 py-2 bg-white cursor-pointer overflow-hidden whitespace-nowrap text-ellipsis text-sm focus:ring-2 focus:ring-indigo-400 focus:outline-none">
                            Select Department(s)
                        </div>
                        <div class="checkbox-list absolute left-0 mt-1 w-full max-h-52 overflow-y-auto bg-white border border-gray-300 rounded shadow-md hidden z-50 text-sm">
                            @foreach (var department in Model.Departments)
                            {
                                var isChecked = Model.SelectedDeptIds != null && Model.SelectedDeptIds.Contains(department.DeptId);
                                <label class="block px-2 py-1 hover:bg-gray-100 cursor-pointer">
                                    <input type="checkbox" name="SelectedDeptIds" value="@department.DeptId"
                                           @(isChecked ? "checked" : "") class="mr-2 align-middle" />
                                    @department.Name
                                </label>
                            }
                        </div>
                    </div>
                    <p class="validation-error text-xs text-red-500 mt-1 hidden">At least one Department is required</p>
                </div>

                <!-- Username -->
                <div>
                    <label for="UserName" class="block text-sm font-semibold text-gray-700 mb-1">Username <span class="text-red-600">*</span></label>
                    <input id="UserName" name="UserName" type="text" pattern="^[a-zA-Z0-9_]{4,20}$" required
                           title="Username must be 4-20 characters and contain only letters, numbers, and underscores"
                           class="w-full rounded border border-gray-300 px-3 py-2 text-sm focus:ring-2 focus:ring-indigo-400 focus:outline-none" />
                    <p class="validation-error text-xs text-red-500 mt-1 hidden">Valid Username is required (no #,$ etc)</p>
                </div>

                <!-- Password -->
                <div>
                    <label for="Password" class="block text-sm font-semibold text-gray-700 mb-1">Password <span class="text-red-600">*</span></label>
                    <input id="Password" name="Password" type="password" required
                           class="w-full rounded border border-gray-300 px-3 py-2 text-sm focus:ring-2 focus:ring-indigo-400 focus:outline-none" />
                    <p class="validation-error text-xs text-red-500 mt-1 hidden">Password is required</p>
                </div>
            </div>

            <div class="flex justify-center pt-10">
                <button type="submit"
                        class="common-btn">
                    Register
                </button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <!-- Flatpickr JS -->
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

    <script>
        function yearsAgo(years) {
            const d = new Date();
            d.setFullYear(d.getFullYear() - years);
            return d;
        }

        flatpickr("#DOB", {
            dateFormat: "Y-m-d",
            maxDate: yearsAgo(18),
            allowInput: true,
            altInput: true,
            altFormat: "F j, Y",
            defaultDate: null,
            disableMobile: "true"
        });
        flatpickr("#DOJ", {
            dateFormat: "Y-m-d",
            maxDate: "today",
            allowInput: true,
            altInput: true,
            altFormat: "F j, Y",
            defaultDate: null,
            disableMobile: "true"
        });

        function setupMultiCheckboxDropdown(dropdownId, errorSelector) {
            const dropdown = document.getElementById(dropdownId);
            const selectedItemsDiv = dropdown.querySelector(".selected-items");
            const checkboxList = dropdown.querySelector(".checkbox-list");
            const checkboxes = checkboxList.querySelectorAll("input[type=checkbox]");
            const errorDiv = dropdown.parentElement.querySelector(errorSelector);

            // Toggle dropdown on click or keyboard enter/space
            selectedItemsDiv.addEventListener("click", () => {
                checkboxList.classList.toggle("hidden");
            });
            selectedItemsDiv.addEventListener("keydown", (e) => {
                if (e.key === "Enter" || e.key === " ") {
                    e.preventDefault();
                    checkboxList.classList.toggle("hidden");
                }
            });

            // Close dropdown on outside click
            document.addEventListener("click", (e) => {
                if (!dropdown.contains(e.target)) {
                    checkboxList.classList.add("hidden");
                }
            });

            // Update selected text display
            function updateSelectedText() {
                const selected = [];
                checkboxes.forEach((cb) => {
                    if (cb.checked) selected.push(cb.parentElement.textContent.trim());
                });
                selectedItemsDiv.textContent = selected.length
                    ? selected.join(", ")
                    : dropdownId === "departmentDropdown"
                    ? "Select Department(s)"
                    : "Select Designation(s)";
            }

            checkboxes.forEach((cb) => {
                cb.addEventListener("change", updateSelectedText);
            });

            updateSelectedText();
        }

        setupMultiCheckboxDropdown("departmentDropdown", ".validation-error");
        setupMultiCheckboxDropdown("designationDropdown", ".validation-error");

        document.getElementById("staffForm").addEventListener("submit", function (e) {
            e.preventDefault();
            let form = this;
            let isValid = true;
            form.querySelectorAll(".validation-error").forEach((div) => div.classList.add("hidden"));

            form.querySelectorAll('input:not([name="SelectedDeptIds"]):not([name="SelectedDesignationIds"]), select, textarea').forEach((input) => {
                if (input.hasAttribute("required") && !input.value.trim()) {
                    showError(input, true);
                    isValid = false;
                } else if (input.hasAttribute("pattern") && input.value.trim()) {
                    let pattern = new RegExp(input.getAttribute("pattern"));
                    if (!pattern.test(input.value.trim())) {
                        showError(input, true);
                        isValid = false;
                    } else {
                        showError(input, false);
                    }
                } else {
                    showError(input, false);
                }
            });

            const deptCheckboxes = document.querySelectorAll('input[name="SelectedDeptIds"]:checked');
            if (deptCheckboxes.length === 0) {
                document.querySelector("#departmentDropdown").parentElement.querySelector(".validation-error").classList.remove("hidden");
                isValid = false;
            }

            const desigCheckboxes = document.querySelectorAll('input[name="SelectedDesignationIds"]:checked');
            if (desigCheckboxes.length === 0) {
                document.querySelector("#designationDropdown").parentElement.querySelector(".validation-error").classList.remove("hidden");
                isValid = false;
            }

            if (isValid) form.submit();

            function showError(input, show) {
                let errorDiv = input.parentElement.querySelector(".validation-error");
                if (errorDiv) errorDiv.classList.toggle("hidden", !show ? true : false);
            }
        });
    </script>
}
