@{
    var username = Context.Session.GetString("UserName");
    var controller = ViewContext.RouteData.Values["controller"]?.ToString();
    var action = ViewContext.RouteData.Values["action"]?.ToString();
    var isLoginPage = controller == "Account" && action == "Login";
    var isAccessDeniedPage = controller == "Account" && action == "AccessDenied";
    var isResetPasswordPage = controller == "Account" && action == "ResetPassword";
    var isFirstLogin = Context.Session.GetString("IsFirstLogin") == "true";
    var isAllowedPage = !isLoginPage && !isAccessDeniedPage && !string.IsNullOrEmpty(username) && (!isFirstLogin || isResetPasswordPage);
    var departments = (Context.Session.GetString("UserDepartments") ?? "").ToLower()
                      .Split(',', StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries);
    var isAdmin = departments.Contains("admin");

    var menuItems = new[]
    {
        new { Name = "Front Office", Controller = "DemoPages", Action = "FrontOffice", AllowedDepts = new[] { "front office" } },
        new { Name = "Accounts", Controller = "DemoPages", Action = "Accounts", AllowedDepts = new[] { "accounts" } },
        new { Name = "Correction", Controller = "DemoPages", Action = "Correction", AllowedDepts = new[] { "correction" } },
        new { Name = "Copying", Controller = "DemoPages", Action = "Copying", AllowedDepts = new[] { "copying" } },
        new { Name = "Cropping", Controller = "DemoPages", Action = "Cropping", AllowedDepts = new[] { "cropping" } },
        new { Name = "PDF", Controller = "DemoPages", Action = "PDF", AllowedDepts = new[] { "pdf" } },
        new { Name = "Printing", Controller = "DemoPages", Action = "Printing", AllowedDepts = new[] { "printing" } },
        new { Name = "Cover Page", Controller = "DemoPages", Action = "CoverPage", AllowedDepts = new[] { "cover page" } },
        new { Name = "Making", Controller = "DemoPages", Action = "Making", AllowedDepts = new[] { "making" } },
        new { Name = "Embossing", Controller = "DemoPages", Action = "Embossing", AllowedDepts = new[] { "embossing" } },
        new { Name = "Deliver", Controller = "DemoPages", Action = "Deliver", AllowedDepts = new[] { "deliver" } }
    };

    Func<string, string, string> isActive = (ctrl, act) =>
        (controller == ctrl && (string.IsNullOrEmpty(act) || action == act)) ? "text-yellow-300 font-bold" : "text-white";
}

<!DOCTYPE html>
<html lang="en">
<head>
    @RenderSection("Styles", required: false)
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>@ViewData["Title"] - Zoom Digital Press Image Processing</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />

    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/LayoutPage.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/Invoice.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/InternalProj.styles.css" asp-append-version="true" />

    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <style>

        body, html {
            margin: 0;
            padding: 0;
            min-height: 100%;
            box-sizing: border-box;
            background-color: #f9fafb;
        }

        header {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            height: 64px; /* h-16 */
            z-index: 40; /* put above nav */
            background-color: #fff;
            border-bottom: 1px solid #e5e7eb;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 1.5rem;
            box-shadow: 0 1px 2px rgba(0,0,0,0.05);
        }

        /* Main horizontal nav - visible on large screens */
        nav.horizontal-nav {
            position: fixed;
            top: 64px;
            left: 0;
            right: 0;
            height: 56px;
            z-index: 30;
            background-color: #4c1d95;
            display: flex;
            align-items: center;
            padding-left: 0;
            padding-right: 3rem;
            gap: 0.75rem;
        }

        /* Hide horizontal nav on small screens */
        @@media (max-width: 1023px) {
            nav.horizontal-nav

        {
            display: none !important;
        }

        }

        /* Side drawer nav - hidden by default */
        nav.side-drawer {
            position: fixed;
            top: 64px; /* below header */
            bottom: 40px; /* above footer (adjust footer height if needed) */
            left: 0;
            width: 16rem; /* 256px */
            background-color: #4c1d95;
            padding-top: 1rem;
            padding-left: 1rem;
            padding-right: 1rem;
            z-index: 50;
            transform: translateX(-100%);
            transition: transform 0.3s ease;
            overflow-y: auto;
            display: none; /* hide by default, shown only on small screens */
        }

            /* Show drawer when active */
            nav.side-drawer.open {
                transform: translateX(0);
            }

            /* Side drawer links styling */
            nav.side-drawer a {
                display: block;
                color: white;
                padding: 0.5rem 1rem;
                border-radius: 0.375rem;
                margin-bottom: 0.25rem;
                text-decoration: none;
            }

                nav.side-drawer a:hover,
                nav.side-drawer a.font-bold {
                    background-color: #6b21a8; /* darker purple */
                    font-weight: bold;
                    color: #fcd34d; /* yellow */
                }

        /* Overlay for drawer */
        #drawerOverlay {
            display: none;
            position: fixed;
            top: 64px;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0,0,0,0.4);
            z-index: 45;
        }

            #drawerOverlay.active {
                display: block;
            }

        /* Hamburger button visible on small screens only */
        #drawerOpenBtn {
            display: none;
        }

        /* Show hamburger and side drawer only on small screens */
        @@media (max-width: 1023px) {
            #drawerOpenBtn

        {
            display: block;
        }

        nav.side-drawer {
            display: block;
        }

        }

        /* On large screen, main content padding accounts for header + horizontal nav + footer */
        .content-wrapper {
            padding-top: 120px; /* 64 + 56 */
            padding-left: 2rem;
            padding-right: 2rem;
            padding-bottom: 40px; /* footer height */
            max-width: 112rem;
            margin-left: auto;
            margin-right: auto;
            margin-bottom: auto;
            box-sizing: border-box;
        }

        /* On small screen, only header height padding and footer bottom padding */
        @@media (max-width: 1023px) {
            .content-wrapper

        {
            padding-top: 64px;
            padding-left: 0.5rem;
            padding-right: 0.5rem;
            padding-bottom: 40px; /* footer height */
            margin-bottom: 20px;
        }

        }

        /* Departments Dropdown fix */
        #departmentsDropdown {
            min-width: 160px;
        }

        /* Departments subnav (side drawer) - hidden by default, shown via .open class */
        #deptTreeSubnav {
            display: none;
            transition: max-height 0.2s;
        }

            #deptTreeSubnav.open {
                display: block;
            }

        /* For arrow animation (optional) */
        #deptArrow {
            transition: transform 0.2s;
        }


    </style>

</head>

<body>
    @if (isAllowedPage)
    {
        <header>
            <div class="flex items-center space-x-4">
                <button id="drawerOpenBtn" class="lg:hidden p-2 rounded-md hover:bg-purple-100 focus:bg-purple-200" aria-label="Open Menu" aria-expanded="false" aria-controls="sideDrawer">
                    <svg width="28" height="28" fill="none" stroke="currentColor" stroke-width="2" class="text-purple-900">
                        <rect x="4" y="7" width="20" height="2" rx="1" fill="currentColor" />
                        <rect x="4" y="13" width="20" height="2" rx="1" fill="currentColor" />
                        <rect x="4" y="19" width="20" height="2" rx="1" fill="currentColor" />
                    </svg>
                </button>
                <a asp-controller="Home" asp-action="Index">
                    <img src="~/Logo.png" alt="Zoom Logo" class="h-11" />
                </a>
            </div>
            <div class="flex items-center space-x-3">
                <span class="font-semibold text-purple-900">@username</span>
                <form asp-controller="Account" asp-action="Logout" method="post" class="mb-0">
                    <button type="submit" class="w-9 h-9 rounded-full bg-purple-800 hover:bg-red-600 border border-purple-100 text-white flex items-center justify-center transition" aria-label="Logout">
                        <svg fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-5 h-5"><path d="M16 17l5-5-5-5" /><path d="M21 12H9" /><path d="M12 19a9 9 0 1 1 0-14" /></svg>
                    </button>
                </form>
            </div>
        </header>

        <nav class="horizontal-nav fixed w-full border-b border-gray-200 z-10" aria-label="Main Navigation Horizontal">
            <a asp-controller="Dashboard" asp-action="Index" class="px-4 py-2 rounded hover:bg-purple-800 @isActive("Dashboard", "Index")">Home</a>

            @if (isAdmin)
            {
                <a asp-controller="Receipt" asp-action="Create" class="px-4 py-2 rounded hover:bg-purple-800 @isActive("Receipt", "Create")">Receipt</a>
                <a asp-controller="CustomerReg" asp-action="Create" class="px-4 py-2 rounded hover:bg-purple-800 @isActive("CustomerReg", "Create")">Customer Registration</a>
                <a asp-controller="StaffReg" asp-action="Index" class="px-4 py-2 rounded hover:bg-purple-800 @isActive("StaffReg", "Index")">Staff Registration</a>
                <a asp-controller="WorkOrder" asp-action="Create" class="px-4 py-2 rounded hover:bg-purple-800 @isActive("WorkOrder", "Create")">Work Order</a>
                <a asp-controller="ViewWork" asp-action="Index" class="px-4 py-2 rounded hover:bg-purple-800 @isActive("ViewWork", "Index")">Reports</a>
                <a asp-controller="StudioCallLogs" asp-action="Index" class="px-4 py-2 rounded hover:bg-purple-800 @isActive("StudioCallLogs", "Index")">CallLogs</a>
                <a asp-controller="Invoice" asp-action="CreateInvoice" class="px-4 py-2 rounded hover:bg-purple-800 @isActive("Invoice", "CreateInvoice")">Invoice</a>
            }
            @if (menuItems.Any(item => isAdmin || item.AllowedDepts.Any(dep => departments.Contains(dep))))
            {
                <div class="relative" id="departmentsDropdownWrapper">
                    <button type="button"
                            id="departmentsDropdownBtn"
                            class="px-4 py-2 rounded hover:bg-purple-800 text-white flex items-center gap-2 focus:outline-none"
                            aria-haspopup="true"
                            aria-expanded="false">
                        Departments
                        <svg width="14" height="14" fill="none" stroke="currentColor" stroke-width="2" class="inline-block"><path d="M5 8l3 3 3-3" /></svg>
                    </button>
                    <div id="departmentsDropdown"
                         class="absolute left-0 mt-1 w-44 bg-white shadow-lg rounded border border-gray-200 transition-all duration-200 ease-in-out opacity-0 invisible z-10"
                         tabindex="-1">
                        @foreach (var item in menuItems)
                        {
                            if (isAdmin || item.AllowedDepts.Any(dep => departments.Contains(dep)))
                            {
                                <a asp-controller="@item.Controller" asp-action="@item.Action"
                                   class="block px-4 py-2 text-gray-700 hover:bg-purple-100 hover:text-purple-900 @(controller == item.Controller && action == item.Action ? "font-bold" : "")">@item.Name</a>
                            }
                        }
                    </div>
                </div>
            }
        </nav>

        <nav id="sideDrawer" class="side-drawer" aria-label="Main Navigation Side Drawer" tabindex="-1" aria-hidden="true">
            <button id="drawerCloseBtn" aria-label="Close Menu" class="mb-4 p-2 rounded-md hover:bg-purple-100 focus:bg-purple-200 text-white">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>

            <a asp-controller="Dashboard" asp-action="Index" class="@isActive("Dashboard", "Index")">Home</a>

            @if (isAdmin)
            {
                <a asp-controller="Receipt" asp-action="Create" class="@isActive("Receipt", "Create")">Receipt</a>
                <a asp-controller="CustomerReg" asp-action="Create" class="@isActive("CustomerReg", "Create")">Customer Registration</a>
                <a asp-controller="StaffReg" asp-action="Index" class="@isActive("StaffReg", "Index")">Staff Registration</a>
                <a asp-controller="WorkOrder" asp-action="Create" class="@isActive("WorkOrder", "Create")">Work Order</a>
                <a asp-controller="ViewWork" asp-action="Index" class="@isActive("ViewWork", "Index")">Reports</a>
                <a asp-controller="StudioCallLogs" asp-action="Index" class="@isActive("StudioCallLogs", "Index")">CallLogs</a>
                <a asp-controller="Invoice" asp-action="CreateInvoice" class="@isActive("Invoice", "CreateInvoice")">Invoice</a>
            }
            @if (menuItems.Any(item => isAdmin || item.AllowedDepts.Any(dep => departments.Contains(dep))))
            {
                @* <div class="mt-2">
                    <span class="block px-4 py-2 font-semibold text-yellow-300">Departments</span>
                    @foreach (var item in menuItems)
                    {
                        if (isAdmin || item.AllowedDepts.Any(dep => departments.Contains(dep)))
                        {
                            <a asp-controller="@item.Controller" asp-action="@item.Action"
                               class="text-white hover:bg-purple-700 rounded px-4 py-2 block @(controller == item.Controller && action == item.Action ? "font-bold bg-purple-800" : "")">
                                @item.Name
                            </a>
                        }
                    }
                </div> *@
                <div id="deptTreeWrapper" class="mt-2">
                    <button id="deptTreeHeader"
                            class="block px-4 py-2 font-semibold text-yellow-300 w-full text-left flex items-center justify-between">
                        Departments
                        <svg id="deptArrow" class="inline ml-2 transition-transform" width="16" height="16" fill="none" stroke="currentColor"><path d="M6 10l4-4" /></svg>
                    </button>
                    <div id="deptTreeSubnav" class="pl-4 mt-1" style="display: none;">
                        @foreach (var item in menuItems)
                        {
                            if (isAdmin || item.AllowedDepts.Any(dep => departments.Contains(dep)))
                            {
                                <a asp-controller="@item.Controller" asp-action="@item.Action"
                                   class="text-white hover:bg-purple-700 rounded px-4 py-2 block @(controller == item.Controller && action == item.Action ? "font-bold bg-purple-800" : "")">
                                    @item.Name
                                </a>
                            }
                        }
                    </div>
                </div>

            }
        </nav>

        <div id="drawerOverlay" tabindex="-1" aria-hidden="true"></div>
    }

    <div class="content-wrapper">
        <main>
            @RenderBody()
        </main>
    </div>

    @if (isAllowedPage)
    {
        <footer class="fixed bottom-0 left-0 w-full py-2 text-center text-sm text-gray-500 border-t bg-white z-50">
            &copy; 2025 - Zoom Digital Press Image Processing - <a asp-controller="Home" asp-action="Privacy" class="underline hover:text-purple-800">Privacy</a>
        </footer>
    }

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>

    @await RenderSectionAsync("Scripts", required: false)

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const sideDrawer = document.getElementById('sideDrawer');
            const drawerOpenBtn = document.getElementById('drawerOpenBtn');
            const drawerCloseBtn = document.getElementById('drawerCloseBtn');
            const overlay = document.getElementById('drawerOverlay');

            function openDrawer() {
                sideDrawer.classList.add('open');
                sideDrawer.setAttribute('aria-hidden', 'false');
                overlay.classList.add('active');
                drawerOpenBtn.setAttribute('aria-expanded', 'true');
                sideDrawer.focus();
            }
            function closeDrawer() {
                sideDrawer.classList.remove('open');
                sideDrawer.setAttribute('aria-hidden', 'true');
                overlay.classList.remove('active');
                drawerOpenBtn.setAttribute('aria-expanded', 'false');
                drawerOpenBtn.focus();
            }

            if (drawerOpenBtn) drawerOpenBtn.addEventListener('click', openDrawer);
            if (drawerCloseBtn) drawerCloseBtn.addEventListener('click', closeDrawer);
            if (overlay) overlay.addEventListener('click', closeDrawer);

            document.addEventListener('keydown', function(e) {
                if (sideDrawer.classList.contains('open') && e.key === "Escape") {
                    closeDrawer();
                }
            });

            var btn = document.getElementById("departmentsDropdownBtn");
            var dropdown = document.getElementById("departmentsDropdown");
            var wrapper = document.getElementById("departmentsDropdownWrapper");

            if (btn) {
                btn.addEventListener("click", function(e) {
                    e.stopPropagation();
                    var isOpen = dropdown.classList.contains("opacity-100");
                    if (isOpen) {
                        dropdown.classList.remove("opacity-100", "visible");
                        dropdown.classList.add("opacity-0", "invisible");
                        btn.setAttribute("aria-expanded", "false");
                    } else {
                        dropdown.classList.remove("opacity-0", "invisible");
                        dropdown.classList.add("opacity-100", "visible");
                        btn.setAttribute("aria-expanded", "true");
                    }
                });
            }

            document.addEventListener("click", function(e) {
                if (wrapper && !wrapper.contains(e.target)) {
                    dropdown.classList.remove("opacity-100", "visible");
                    dropdown.classList.add("opacity-0", "invisible");
                    if (btn) btn.setAttribute("aria-expanded", "false");
                }
            });

                    var deptTreeHeader = document.getElementById("deptTreeHeader");
        var deptTreeSubnav = document.getElementById("deptTreeSubnav");
        var deptArrow = document.getElementById('deptArrow');

        if (deptTreeHeader && deptTreeSubnav) {
            deptTreeHeader.addEventListener("click", function(e) {
                e.preventDefault();
                var isOpen = deptTreeSubnav.classList.contains("open");
                deptTreeSubnav.classList.toggle("open", !isOpen);
                if (deptArrow) {
                    deptArrow.style.transform = isOpen ? '' : 'rotate(90deg)';
                }
            });
        }

            function handleResize() {
                if (window.innerWidth >= 1024) {
                    if (sideDrawer.classList.contains('open')) {
                        closeDrawer();
                    }
                }
            }

            window.addEventListener('resize', handleResize);

            handleResize();
        });
    </script>

    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
</body>
</html>
