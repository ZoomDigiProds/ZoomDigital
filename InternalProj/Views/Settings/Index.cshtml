@{
    ViewData["Title"] = "Settings Layout";
}

<style>

    .setting-link {
        display: block;
        background-color: #1e3a8a;
        color: white;
        text-decoration: none;
        padding: 0.3rem 0;
        transition: background 0.2s;
        border-radius: 4px;
    }

        .setting-link:hover {
            background-color: #1d4ed8;
            cursor: pointer;
            color: white;
        }

        .setting-link:active {
            outline: none;
            box-shadow: 0 0 0 2px #2563eb;
        }

    .expand-toggle {
        display: block;
        color: white;
        cursor: pointer;
        padding: 0.5rem 0;
    }

    .submenu {
        list-style: none;
        padding-left: 1rem;
        display: none;
    }

        .submenu li {
            color: #ddd;
            margin-left: 0.5rem;
        }

    .active {
        background-color: #2563eb !important;
    }
</style>

<!-- Layout with Sidebar and Content -->
<div style="display: flex; height: calc(90vh - 65px);">

    <!-- Sidebar -->
    <div id="sidebar" style="width: 250px; background-color: #1e3a8a; color: white; padding: 1rem;">
        <h3 class="page-heading text-white">Settings</h3>
        <ul style="list-style: none; padding-left: 0;">

            <!-- General Settings Section -->
            <li>
                <a href="#" class="expand-toggle">General Settings</a>
                <ul class="submenu">
                    <li><a href="#" class="setting-link" data-url="/Settings/Pagination">Pagination</a></li>
                    <li><a href="#" class="setting-link" data-url="/Settings/Scheduler">Scheduler Settings</a></li>
                    <li><a href="#" class="setting-link" data-url="/Settings/PasswordPolicy">Password Policy</a></li>
                    <li><a href="#" class="setting-link" data-url="/Settings/SmsContent">SMS Content</a></li>
                </ul>
            </li>

            <!-- Dictionary Section -->
            <li>
                <a href="#" class="expand-toggle">Dictionary</a>
                <ul class="submenu">
                    <li><a href="#" class="setting-link" data-url="/StateData/Index">States</a></li>
                </ul>
            </li>

            <!-- Logs -->
            <li>
                <a href="#" class="setting-link" data-url="/Account/LoginLogList">Logs</a>
            </li>
        </ul>
    </div>

    <!-- Main Content Area -->
    <div id="content-area" style="flex: 1; padding-left:1rem">
        <div id="inner-content">
            <h1>Main Page</h1>
            <p>This is the main content area.</p>
        </div>
    </div>
</div>

<script src="~/js/dictionarySettings.js"></script>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        // Expand/Collapse toggles
        document.querySelectorAll(".expand-toggle").forEach(toggle => {
            toggle.addEventListener("click", function (e) {
                e.preventDefault();
                e.stopPropagation(); // prevent bubbling into link handler

                const submenu = this.nextElementSibling;
                if (submenu && submenu.classList.contains("submenu")) {
                    submenu.style.display = submenu.style.display === "block" ? "none" : "block";
                }
            });
        });

            // Universal event delegation for setting links
       document.addEventListener("click", function (e) {
        const link = e.target.closest("a.setting-link");
        if (!link) return;

        e.preventDefault();
        e.stopPropagation();

        const url = link.dataset.url;
        if (!url) return;

        // Highlight active link
        document.querySelectorAll(".setting-link").forEach(l => l.classList.remove("active"));
        link.classList.add("active");

        const innerContent = document.getElementById("inner-content");

        // ✅ Decide how to load
        if (url.startsWith("/StateData") || url.startsWith("/Account")) {
            // Load in iframe for full layout pages
            innerContent.innerHTML = `
                <iframe src="${url}" style="width:100%; height:80vh; border:none;"></iframe>
            `;
        } else {
            // Load as partial via fetch
            fetch(url, { cache: "no-store" })
                .then(response => {
                    if (!response.ok) throw new Error(`HTTP error ${response.status}`);
                    return response.text();
                })
                .then(html => {
                    innerContent.innerHTML = html;

                    // Extract and re-run scripts
                    const tempDiv = document.createElement("div");
                    tempDiv.innerHTML = html;
                    const scripts = tempDiv.querySelectorAll("script");

                    scripts.forEach(script => {
                        if (script.src) {
                            if (!document.querySelector(`script[src="${script.src}"]`)) {
                                const newScript = document.createElement("script");
                                newScript.src = script.src;
                                document.body.appendChild(newScript);
                            }
                        } else {
                            try {
                                new Function(script.textContent)();
                            } catch (err) {
                                console.error("Inline script error:", err);
                            }
                        }
                    });
                })
                .catch(err => console.error("Error loading content:", err));
        }
    });
 });
</script>
